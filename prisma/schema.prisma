// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// create a user model
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  firstName String?
  lastName  String?
  password  String
  bio       String?
  phone     String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blogs    Blog[]
  comments Comment[]
  likes    Like[]
  projects Project[]
  events   Event[]
}

//create a Blog model
model Blog {
  id         String   @id @default(uuid())
  title      String
  summary    String
  content    String
  isApproved Boolean  @default(false)
  image      String?
  links      String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  tags     Tag[]
  comments Comment[]
  likes    Like[]
  author   User      @relation(fields: [authorId], references: [id])
  authorId String
}

// create a Comment model
model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
}

// create a Like model
model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Blog      Blog?    @relation(fields: [blogId], references: [id])
  blogId    String?
}

//create a tag model
model Tag {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blogs     Blog[]
}

// create a Project model
model Project {
  id         String   @id @default(uuid())
  title      String
  content    String
  signatures String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

// create an Event model
model Event {
  id          String   @id @default(uuid())
  title       String
  web_link    String
  location    String
  description String
  due_date    DateTime
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

// create an enum for user roles
enum Role {
  ADMIN
  USER
}
